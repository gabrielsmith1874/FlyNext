// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  passportId      String  
  phone           String?
  profilePicture  String?
  role            String    @default("USER") 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
  hotels          Hotel[]
  notifications   Notification[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  country   String
  airports  Airport[]
  hotels    Hotel[]
}

model Airport {
  id        String  @id @default(uuid())
  code      String  @unique
  name      String
  cityId    String
  city      City    @relation(fields: [cityId], references: [id])
}

model Airline {
  id        String  @id @default(uuid())
  code      String  @unique
  name      String
  baseCode  String?
}

model FlightBooking {
  id                 String   @id @default(cuid())
  bookingId          String
  booking            Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  flightId           String
  flightNumber       String
  airline            String
  origin             String
  destination        String
  departureTime      DateTime
  arrivalTime        DateTime
  price              Float
  currency           String
  status             String
  isConnectingLeg    Boolean  @default(false)
  connectionGroupId  String?
  passengerDetails   String?
}

model Booking {
  id                String          @id @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingReference  String          @unique
  ticketNumber      String?
  status            String          @default("PENDING")
  totalPrice        Float
  currency          String          @default("USD")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  flights           FlightBooking[]
  hotelBookings     HotelBooking[]  
  payment           Payment?
}

model Payment {
  id          String    @id @default(uuid())
  bookingId   String    @unique
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  cardLast4   String    // Store only last 4 digits for reference
  cardType    String    // Visa, Mastercard, etc.
  cardholderName String
  paymentStatus String   @default("COMPLETED")
  createdAt   DateTime  @default(now())
}

model Hotel {
  id              String          @id @default(uuid())
  name            String
  description     String? 
  ownerId         String
  owner           User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  logo            String?
  address         String
  cityId          String
  city            City            @relation(fields: [cityId], references: [id])
  rating          Float
  amenities       String        
  contactEmail    String
  contactPhone    String
  images          HotelImage[]
  rooms           Room[]
  latitude        Float?
  longitude       Float?
  bookings        HotelBooking[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model HotelImage {
  id        String  @id @default(uuid())
  hotelId   String
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  url       String
  caption   String?
}

model Room {
  id          String          @id @default(uuid())
  hotelId     String
  hotel       Hotel           @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  type        String
  description String
  price       Float
  currency    String          @default("USD")
  amenities   String
  images      RoomImage[]
  bookings    HotelBooking[]
  availableCount Int          @default(1)
  maxGuests   Int?            // new: maximum number of guests allowed per room
  availability RoomAvailabilityCalendar[]
}

model RoomAvailabilityCalendar {
  id        String   @id @default(uuid())
  roomId    String
  date      DateTime
  available Int      @default(0)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, date])
}

model RoomImage {
  id        String  @id @default(uuid())
  roomId    String
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  url       String
  caption   String?
}

model HotelBooking {
  id            String    @id @default(uuid())
  bookingId     String
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  hotelId       String
  hotel         Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomId        String
  room          Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  checkInDate   DateTime
  checkOutDate  DateTime
  guestCount    Int
  price         Float
  currency      String    @default("USD")
  status        String    @default("PENDING")
  guestDetails  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  message     String
  type        String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}